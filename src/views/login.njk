{% extends "templates/layout.njk" %}

{% block applicationTitle %}Login - Kainos Job Application{% endblock %}

{% block content %}
<main id="main-content" class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-blue-50 via-white to-green-50">
    <div class="max-w-md w-full space-y-8">
        <!-- Header -->
        <div class="text-center">
            <img src="/KainosLogoNoBackground.png" alt="Kainos Logo" class="mx-auto h-16 w-auto mb-6">
            <h2 class="text-3xl font-bold text-gray-900 mb-2">Welcome Back</h2>
            <p class="text-gray-600">Sign in to access your account</p>
        </div>

        <!-- Login Form -->
        <div class="bg-white rounded-2xl shadow-xl p-8 border border-gray-100">
            <form id="loginForm" action="/login" method="POST" class="space-y-6" novalidate>
                <!-- Username/Email Field -->
                <div>
                    <label for="username" class="block text-sm font-semibold text-gray-700 mb-2">
                        Username <span class="text-red-500">*</span>
                    </label>
                    <div class="relative">
                        <input 
                            type="text" 
                            id="username" 
                            name="username" 
                            required 
                            value="{{ formData.username if formData else '' }}"
                            placeholder="Enter your username"
                            class="w-full px-4 py-3 pr-12 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-all duration-200 text-gray-900 bg-white placeholder-gray-400 {{ 'border-red-500 focus:border-red-500' if fieldErrors.username else '' }}"
                            autocomplete="username"
                            data-field="username"
                        >
                        <!-- Success/Error Icons -->
                        <div class="absolute right-3 top-1/2 -translate-y-1/2">
                            <svg id="username-success" class="w-5 h-5 text-green-500 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                            </svg>
                            <svg id="username-error" class="w-5 h-5 text-red-500 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </div>
                    </div>
                    <!-- Username Error Message -->
                    <div id="username-error-msg" class="mt-1 text-sm text-red-600 {{ 'block' if fieldErrors.username else 'hidden' }}">
                        {{ fieldErrors.username if fieldErrors.username }}
                    </div>
                </div>

                <!-- Password Field -->
                <div>
                    <label for="password" class="block text-sm font-semibold text-gray-700 mb-2">
                        Password <span class="text-red-500">*</span>
                    </label>
                    <div class="relative">
                        <input 
                            type="password" 
                            id="password" 
                            name="password" 
                            required 
                            value="{{ formData.password if formData else '' }}"
                            placeholder="Enter your password"
                            class="w-full px-4 py-3 pr-12 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-all duration-200 text-gray-900 bg-white placeholder-gray-400 {{ 'border-red-500 focus:border-red-500' if fieldErrors.password else '' }}"
                            autocomplete="current-password"
                            data-field="password"
                        >
                        <button 
                            type="button" 
                            id="togglePassword"
                            class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700 focus:outline-none"
                            aria-label="Toggle password visibility"
                        >
                            <svg id="eyeIcon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                            </svg>
                            <svg id="eyeOffIcon" class="w-5 h-5 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                            </svg>
                        </button>
                    </div>
                    <!-- Password Error Message -->
                    <div id="password-error-msg" class="mt-1 text-sm text-red-600 {{ 'block' if fieldErrors.password else 'hidden' }}">
                        {{ fieldErrors.password if fieldErrors.password }}
                    </div>
                </div>

                <!-- Remember Me & Forgot Password -->
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <input 
                            type="checkbox" 
                            id="remember" 
                            name="remember" 
                            {{ 'checked' if formData.remember else '' }}
                            class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2 transition-colors"
                        >
                        <label for="remember" class="ml-2 text-sm text-gray-700 cursor-pointer">Remember me for 30 days</label>
                    </div>
                    <a href="/forgot-password" class="text-sm text-blue-600 hover:text-blue-700 font-medium transition-colors">
                        Forgot password?
                    </a>
                </div>

                <!-- Error Message -->
                {% if error %}
                <div class="bg-red-50 border-l-4 border-red-500 p-4 rounded-lg">
                    <div class="flex items-center">
                        <svg class="w-5 h-5 text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <p class="text-sm text-red-700">{{ error }}</p>
                    </div>
                </div>
                {% endif %}

                <!-- Submit Button -->
                <button 
                    type="submit" 
                    class="w-full bg-gradient-to-r from-blue-600 to-green-600 text-white font-semibold py-3 px-4 rounded-lg hover:from-blue-700 hover:to-green-700 transition-all duration-200 flex items-center justify-center gap-2 shadow-lg focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                >
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
                    </svg>
                    Sign In
                </button>
            </form>
        </div>

        <!-- Sign Up Link -->
        <div class="text-center">
            <p class="text-gray-600">
                Don't have an account? 
                <a href="/register" class="text-blue-600 hover:text-blue-700 font-semibold">Sign up</a>
            </p>
        </div>

        <!-- Back to Home -->
        <div class="text-center">
            <a href="/" class="inline-flex items-center text-gray-600 hover:text-gray-900 transition-colors">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Back to Home
            </a>
        </div>
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Enhanced Login Form with Real-time Validation
    const form = document.getElementById('loginForm');
    const usernameInput = document.getElementById('username');
    const passwordInput = document.getElementById('password');
    const submitBtn = form.querySelector('button[type="submit"]');
    const togglePassword = document.getElementById('togglePassword');
    const eyeIcon = document.getElementById('eyeIcon');
    const eyeOffIcon = document.getElementById('eyeOffIcon');
    
    // Validation state
    let validation = {
        username: false,
        password: false
    };
    
    // Validation functions matching backend
    function validateUsername(username) {
        if (!username || username.trim().length === 0) {
            return { isValid: false, error: 'Username is required' };
        }
        
        const trimmed = username.trim();
        if (trimmed.length < 3) {
            return { isValid: false, error: 'Username must be at least 3 characters long' };
        }
        
        if (trimmed.length > 50) {
            return { isValid: false, error: 'Username must be less than 50 characters' };
        }
        
        if (!/^[a-zA-Z0-9._-]+$/.test(trimmed)) {
            return { isValid: false, error: 'Username can only contain letters, numbers, dots, hyphens, and underscores' };
        }
        
        return { isValid: true };
    }
    
    function validatePassword(password) {
        if (!password || password.trim().length === 0) {
            return { isValid: false, error: 'Password is required' };
        }
        
        const trimmed = password.trim();
        if (trimmed.length < 6) {
            return { isValid: false, error: 'Password must be at least 6 characters long' };
        }
        
        if (trimmed.length > 100) {
            return { isValid: false, error: 'Password must be less than 100 characters' };
        }
        
        return { isValid: true };
    }
    
    // Show field validation state
    function showFieldState(field, isValid, error = '') {
        const input = document.getElementById(field);
        const errorMsg = document.getElementById(`${field}-error-msg`);
        const successIcon = document.getElementById(`${field}-success`);
        const errorIcon = document.getElementById(`${field}-error`);
        
        if (isValid) {
            input.classList.remove('border-red-500', 'focus:border-red-500');
            input.classList.add('border-green-500', 'focus:border-green-500');
            errorMsg.classList.add('hidden');
            errorMsg.textContent = '';
            if (successIcon) successIcon.classList.remove('hidden');
            if (errorIcon) errorIcon.classList.add('hidden');
        } else {
            input.classList.remove('border-green-500', 'focus:border-green-500');
            input.classList.add('border-red-500', 'focus:border-red-500');
            errorMsg.classList.remove('hidden');
            errorMsg.textContent = error;
            if (successIcon) successIcon.classList.add('hidden');
            if (errorIcon) errorIcon.classList.remove('hidden');
        }
        
        validation[field] = isValid;
        updateSubmitButton();
    }
    
    // Update submit button state
    function updateSubmitButton() {
        const isFormValid = validation.username && validation.password;
        submitBtn.disabled = !isFormValid;
        
        if (isFormValid) {
            submitBtn.classList.remove('opacity-50', 'cursor-not-allowed');
            submitBtn.classList.add('hover:from-blue-700', 'hover:to-green-700');
        } else {
            submitBtn.classList.add('opacity-50', 'cursor-not-allowed');
            submitBtn.classList.remove('hover:from-blue-700', 'hover:to-green-700');
        }
    }
    
    // Real-time validation on input
    usernameInput.addEventListener('input', function() {
        const result = validateUsername(this.value);
        showFieldState('username', result.isValid, result.error);
    });
    
    usernameInput.addEventListener('blur', function() {
        const result = validateUsername(this.value);
        showFieldState('username', result.isValid, result.error);
    });
    
    passwordInput.addEventListener('input', function() {
        const result = validatePassword(this.value);
        showFieldState('password', result.isValid, result.error);
    });
    
    passwordInput.addEventListener('blur', function() {
        const result = validatePassword(this.value);
        showFieldState('password', result.isValid, result.error);
    });
    
    // Password visibility toggle
    if (togglePassword && passwordInput) {
        togglePassword.addEventListener('click', function() {
            const type = passwordInput.type === 'password' ? 'text' : 'password';
            passwordInput.type = type;
            
            eyeIcon.classList.toggle('hidden');
            eyeOffIcon.classList.toggle('hidden');
            
            // Focus back on password field
            passwordInput.focus();
        });
    }
    
    // Enhanced form submission
    form.addEventListener('submit', function(e) {
        // Final validation before submit
        const usernameResult = validateUsername(usernameInput.value);
        const passwordResult = validatePassword(passwordInput.value);
        
        if (!usernameResult.isValid || !passwordResult.isValid) {
            e.preventDefault();
            showFieldState('username', usernameResult.isValid, usernameResult.error);
            showFieldState('password', passwordResult.isValid, passwordResult.error);
            return;
        }
        
        // Show loading state
        submitBtn.disabled = true;
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = `
            <svg class="animate-spin w-5 h-5 inline-block mr-2" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Signing In...
        `;
        
        // Re-enable button after 10 seconds as fallback
        setTimeout(() => {
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalText;
        }, 10000);
    });
    
    // Initialize validation state on page load
    updateSubmitButton();
    
    // Auto-focus on first empty field
    if (!usernameInput.value.trim()) {
        usernameInput.focus();
    } else if (!passwordInput.value.trim()) {
        passwordInput.focus();
    }
});
</script>
{% endblock %}