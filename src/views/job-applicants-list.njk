{% extends "templates/layout.njk" %}

{% block title %}
Applicants for {{ jobRole.roleName }}
{% endblock %}

{% block content %}
<div class="container mx-auto p-4">
	<!-- Header Section -->
	<div class="mb-6">
		<div class="breadcrumbs text-sm">
			<ul>
				<li><a href="/">Home</a></li>
				<li><a href="/job-roles">Job Roles</a></li>
				<li><a href="/job-roles/{{ jobRole.id }}">{{ jobRole.roleName }}</a></li>
				<li>Applicants</li>
			</ul>
		</div>
		
		<div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mt-4">
			<div>
				<h1 class="text-3xl font-bold text-gray-800">Applicants</h1>
				<p class="text-gray-700 mt-1">
					Showing applicants for: <span class="font-semibold text-gray-900">{{ jobRole.roleName }}</span>
				</p>
				<div class="text-sm text-gray-600 mt-2">
					<span class="badge badge-outline text-gray-800">{{ jobRole.status }}</span>
					<span class="ml-2">Total: {{ pagination.totalApplicants }} applicants</span>
				</div>
			</div>
			
			<div class="flex gap-2">
				<a href="/job-roles/{{ jobRole.id }}" class="btn bg-blue-600 text-white hover:bg-blue-700">
					<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
					</svg>
					Back to Job Role
				</a>
			</div>
		</div>
	</div>

	<!-- Applicants Table -->
	{% if applicants.length > 0 %}
		<div class="card bg-base-100 shadow-xl">
			<div class="card-body p-0">
				<!-- Desktop Table -->
				<div class="hidden lg:block overflow-x-auto">
					<table class="table table-zebra">
						<thead>
							<tr>
								<th>Applicant Name</th>
								<th>Email</th>
								<th>Status</th>
								<th>Applied Date</th>
								<th>Cover Letter</th>
								<th>Resume</th>
								<th>Actions</th>
							</tr>
						</thead>
						<tbody>
							{% for applicant in applicants %}
							<tr>
								<td>
									<div class="font-medium">{{ applicant.applicantName }}</div>
								</td>
								<td>
									<div class="text-sm">{{ applicant.applicantEmail }}</div>
								</td>
								<td>
									<div class="badge badge-info">
										{{ applicant.status | title }}
									</div>
								</td>
								<td>
									<div class="text-sm">{{ applicant.submittedAt | formatDateTime }}</div>
									{% if applicant.updatedAt and applicant.updatedAt != applicant.submittedAt %}
										<div class="text-xs text-base-content/60">Updated: {{ applicant.updatedAt | formatDate }}</div>
									{% endif %}
								</td>
								<td>
									{% if applicant.coverLetter %}
										<button 
											class="btn btn-ghost btn-xs cover-letter-btn" 
											data-applicant-id="{{ applicant.applicationId | escape }}"
											data-applicant-name="{{ applicant.applicantName | escape }}"
											data-applicant-email="{{ applicant.applicantEmail | escape }}"
											data-cover-letter="{{ applicant.coverLetter | escape }}"
											data-resume-url="{{ (applicant.resumeUrl or '') | escape }}"
											data-has-cv="{{ applicant.hasCv | string }}">
											<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
											</svg>
											View
										</button>
									{% else %}
										<span class="text-base-content/40 text-xs">No cover letter</span>
									{% endif %}
								</td>
								<td>
									{% if applicant.hasCv %}
										<a href="/applications/{{ applicant.applicationId }}/cv" target="_blank" class="btn btn-ghost btn-xs">
											<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
											</svg>
											Download
										</a>
									{% elif applicant.resumeUrl %}
										<a href="{{ applicant.resumeUrl }}" target="_blank" class="btn btn-ghost btn-xs">
											<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
											</svg>
											Download
										</a>
									{% else %}
										<span class="text-base-content/40 text-xs">No resume</span>
									{% endif %}
								</td>
								<td>
									<div class="dropdown dropdown-end">
										<div tabindex="0" role="button" class="btn btn-ghost btn-xs">
											<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
											</svg>
										</div>
										<ul tabindex="0" class="dropdown-content menu bg-base-100 rounded-box z-[1] w-52 p-2 shadow">
											<li><a href="mailto:{{ applicant.applicantEmail }}">Contact Applicant</a></li>
											<li><a onclick="viewApplicationDetails('{{ applicant.applicationId }}')">View Details</a></li>
											{% set applicant_status_lower = applicant.status | lower %}
											{% if applicant_status_lower == 'pending' or applicant_status_lower == 'in progress' %}
												<li><a onclick="acceptApplicant('{{ applicant.applicationId }}', '{{ jobRole.id }}', '{{ applicant.applicantName | escape }}')">Accept</a></li>
												<li><a onclick="rejectApplicant('{{ applicant.applicationId }}', '{{ jobRole.id }}', '{{ applicant.applicantName | escape }}')">Reject</a></li>
											{% endif %}
										</ul>
									</div>
								</td>
							</tr>
							{% endfor %}
						</tbody>
					</table>
				</div>

				<!-- Mobile Cards -->
				<div class="lg:hidden">
					{% for applicant in applicants %}
					<div class="card bg-base-200 m-4 shadow">
						<div class="card-body">
							<div class="flex justify-between items-start">
								<div>
									<h3 class="card-title text-lg">{{ applicant.applicantName }}</h3>
									<p class="text-sm text-base-content/70">{{ applicant.applicantEmail }}</p>
								</div>
								<div class="badge badge-info">
									{{ applicant.status | title }}
								</div>
							</div>
							
							<div class="text-sm mt-2">
								<p><span class="font-medium">Applied:</span> {{ applicant.submittedAt | formatDateTime }}</p>
								{% if applicant.updatedAt and applicant.updatedAt != applicant.submittedAt %}
									<p><span class="font-medium">Updated:</span> {{ applicant.updatedAt | formatDate }}</p>
								{% endif %}
							</div>
							
							<div class="card-actions justify-between mt-4">
								<div class="flex gap-2">
									{% if applicant.coverLetter %}
										<button 
											class="btn btn-outline btn-xs cover-letter-btn"
											data-applicant-id="{{ applicant.applicationId | escape }}"
											data-applicant-name="{{ applicant.applicantName | escape }}"
											data-applicant-email="{{ applicant.applicantEmail | escape }}"
											data-cover-letter="{{ applicant.coverLetter | escape }}"
											data-resume-url="{{ (applicant.resumeUrl or '') | escape }}"
											data-has-cv="{{ applicant.hasCv | string }}">
											Cover Letter
										</button>
									{% endif %}
									{% if applicant.hasCv %}
										<a href="/applications/{{ applicant.applicationId }}/cv" target="_blank" class="btn btn-outline btn-xs">
											Resume
										</a>
									{% elif applicant.resumeUrl %}
										<a href="{{ applicant.resumeUrl }}" target="_blank" class="btn btn-outline btn-xs">
											Resume
										</a>
									{% endif %}
								</div>
								<a href="mailto:{{ applicant.applicantEmail }}" class="btn btn-primary btn-xs">
									Contact
								</a>
							</div>
						</div>
					</div>
					{% endfor %}
				</div>
			</div>
		</div>

		<!-- Pagination -->
		{% if pagination.totalPages > 1 %}
			{% include "templates/pagination.njk" %}
		{% endif %}

	{% else %}
		<!-- Empty State -->
		<div class="card bg-white shadow-xl">
			<div class="card-body text-center py-16">
				<div class="mx-auto w-24 h-24 bg-gray-200 rounded-full flex items-center justify-center mb-4">
					<svg class="w-12 h-12 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
					</svg>
				</div>
				<h2 class="text-2xl font-semibold text-gray-800 mb-2">No Applicants Yet</h2>
				<p class="text-gray-600 mb-6">This job role hasn't received any applications yet.</p>
				<div class="flex flex-col sm:flex-row gap-2 justify-center">
					<a href="/job-roles/{{ jobRole.id }}" class="btn bg-blue-600 text-white hover:bg-blue-700">
						View Job Role Details
					</a>
					<a href="/job-roles/{{ jobRole.id }}/apply" class="btn bg-green-600 text-white hover:bg-green-700">
						Test Application Form
					</a>
				</div>
			</div>
		</div>
	{% endif %}
</div>

<!-- Application Details Modal -->
<dialog id="cover_letter_modal" class="modal modal-bottom sm:modal-middle">
	<div class="modal-box max-w-6xl w-full h-[90vh] max-h-[90vh] p-0 bg-white">
		<!-- Modal Header -->
		<div class="sticky top-0 z-10 bg-gradient-to-r from-blue-600 to-blue-700 text-white px-6 py-4 flex justify-between items-center shadow-md">
			<div>
				<h3 class="font-bold text-xl">Application Details</h3>
				<div class="text-sm opacity-90 mt-1">
					<span id="cover_letter_applicant" class="font-medium"></span>
					<span class="mx-2">•</span>
					<span id="cover_letter_email" class="italic"></span>
				</div>
			</div>
			<form method="dialog">
				<button class="btn btn-sm btn-circle btn-ghost hover:bg-white/20">
					<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
					</svg>
				</button>
			</form>
		</div>

		<!-- Modal Content -->
		<div class="overflow-y-auto h-full pb-6">
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 p-6">
				<!-- Cover Letter Section -->
				<div class="flex flex-col h-full">
					<div class="bg-gradient-to-r from-purple-50 to-purple-100 rounded-t-lg px-4 py-3 border-b-2 border-purple-300">
						<div class="flex items-center gap-2">
							<svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
							</svg>
							<h4 class="font-bold text-lg text-purple-900">Cover Letter</h4>
						</div>
					</div>
					<div class="flex-1 bg-white border-2 border-purple-200 rounded-b-lg p-6 shadow-lg">
						<div class="prose prose-sm max-w-none">
							<p id="cover_letter_content" class="whitespace-pre-wrap text-gray-700 leading-relaxed"></p>
						</div>
					</div>
				</div>

				<!-- Resume/CV Section -->
				<div class="flex flex-col h-full">
					<div class="bg-gradient-to-r from-green-50 to-green-100 rounded-t-lg px-4 py-3 border-b-2 border-green-300">
						<div class="flex items-center gap-2">
							<svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
							</svg>
							<h4 class="font-bold text-lg text-green-900">Resume / CV</h4>
						</div>
					</div>
					<div id="resume_section" class="flex-1 bg-white border-2 border-green-200 rounded-b-lg shadow-lg">
						<!-- Resume content will be injected here -->
					</div>
				</div>
			</div>
		</div>

		<!-- Modal Footer -->
		<div class="sticky bottom-0 bg-gray-50 border-t border-gray-200 px-6 py-4 flex justify-between items-center">
			<div class="text-sm text-gray-600">
				<span class="font-medium">Application ID:</span> <span id="application_id" class="font-mono"></span>
			</div>
			<div class="flex gap-2">
				<a id="contact_applicant_btn" href="#" class="btn btn-sm bg-blue-600 text-white hover:bg-blue-700">
					<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
					</svg>
					Contact Applicant
				</a>
				<form method="dialog">
					<button class="btn btn-sm btn-ghost">Close</button>
				</form>
			</div>
		</div>
	</div>
	<form method="dialog" class="modal-backdrop bg-black/50 backdrop-blur-sm">
		<button>close</button>
	</form>
</dialog>

<script>
	// XSS Prevention: URL sanitization function
	function sanitizeUrl(url) {
		if (!url || typeof url !== 'string') return '';
		
		// Remove any dangerous protocols
		const dangerousProtocols = ['javascript:', 'data:', 'vbscript:', 'file:', 'about:'];
		const lowerUrl = url.toLowerCase().trim();
		
		for (const protocol of dangerousProtocols) {
			if (lowerUrl.startsWith(protocol)) {
				console.warn('Blocked potentially dangerous URL:', url);
				return '';
			}
		}
		
		// Only allow http, https, and relative URLs
		if (lowerUrl.startsWith('http://') || lowerUrl.startsWith('https://') || lowerUrl.startsWith('/')) {
			return url.trim();
		}
		
		// For relative URLs without leading slash, add it
		if (!lowerUrl.includes('://')) {
			return '/' + url.trim();
		}
		
		console.warn('URL protocol not allowed:', url);
		return '';
	}

	// XSS Prevention: Text content sanitization
	function sanitizeText(text) {
		if (!text || typeof text !== 'string') return '';
		// Create a temporary element to escape HTML entities
		const temp = document.createElement('div');
		temp.textContent = text;
		return temp.innerHTML;
	}

	// Event delegation for application details buttons
	document.addEventListener('DOMContentLoaded', function() {
		document.addEventListener('click', function(event) {
			if (event.target.closest('.cover-letter-btn')) {
				const button = event.target.closest('.cover-letter-btn');
				const applicantId = button.getAttribute('data-applicant-id');
				const applicantName = button.getAttribute('data-applicant-name');
				const applicantEmail = button.getAttribute('data-applicant-email');
				const coverLetter = button.getAttribute('data-cover-letter');
				const resumeUrl = button.getAttribute('data-resume-url');
				const hasCv = button.getAttribute('data-has-cv') === 'true';
				
				// Populate applicant info
				document.getElementById('cover_letter_applicant').textContent = applicantName;
				document.getElementById('cover_letter_email').textContent = applicantEmail;
				document.getElementById('application_id').textContent = applicantId;
				
				// Populate cover letter
				document.getElementById('cover_letter_content').textContent = coverLetter;
				
				// Populate resume section - XSS Safe Implementation
				const resumeSection = document.getElementById('resume_section');
				
				// Check if CV exists using hasCv field from backend
				const cvUrl = hasCv ? `/applications/${applicantId}/cv` : (resumeUrl || '');
				const sanitizedCvUrl = sanitizeUrl(cvUrl);
				
				if (sanitizedCvUrl && sanitizedCvUrl !== '') {
					// Clear existing content
					resumeSection.textContent = '';
					
					// Create elements safely using DOM methods
					const container = document.createElement('div');
					container.className = 'flex flex-col items-center justify-center h-full p-8 space-y-4';
					
					// Icon container
					const iconDiv = document.createElement('div');
					iconDiv.className = 'w-20 h-20 bg-green-100 rounded-full flex items-center justify-center';
					iconDiv.innerHTML = `
						<svg class="w-10 h-10 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
						</svg>
					`;
					
					// Text content
					const textDiv = document.createElement('div');
					textDiv.className = 'text-center';
					
					const title = document.createElement('p');
					title.className = 'text-lg font-semibold text-gray-800 mb-2';
					title.textContent = 'Resume Available';
					
					const subtitle = document.createElement('p');
					subtitle.className = 'text-sm text-gray-600 mb-4';
					subtitle.textContent = 'Click below to view or download the applicant\'s resume';
					
					textDiv.appendChild(title);
					textDiv.appendChild(subtitle);
					
					// Download button - using setAttribute to safely set href
					const downloadBtn = document.createElement('a');
					downloadBtn.className = 'btn bg-green-600 text-white hover:bg-green-700';
					downloadBtn.setAttribute('href', sanitizedCvUrl);
					downloadBtn.setAttribute('target', '_blank');
					downloadBtn.setAttribute('rel', 'noopener noreferrer'); // Security best practice
					downloadBtn.innerHTML = `
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
						</svg>
						Download Resume
					`;
					
					const openBtn = document.createElement('a');
					openBtn.className = 'btn btn-outline btn-sm';
					openBtn.setAttribute('href', sanitizedCvUrl);
					openBtn.setAttribute('target', '_blank');
					openBtn.setAttribute('rel', 'noopener noreferrer');
					openBtn.innerHTML = `
						<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
						</svg>
						Open in New Tab
					`;
					
					// Assemble the structure
					container.appendChild(iconDiv);
					container.appendChild(textDiv);
					container.appendChild(downloadBtn);
					container.appendChild(openBtn);
					
					resumeSection.appendChild(container);
				} else {
					// Create "no resume" state safely - no user data involved here so safer
					resumeSection.innerHTML = `
						<div class="flex flex-col items-center justify-center h-full p-8 text-center">
							<div class="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mb-4">
								<svg class="w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
								</svg>
							</div>
							<p class="text-lg font-semibold text-gray-600 mb-2">No Resume Provided</p>
							<p class="text-sm text-gray-500">This applicant did not upload a resume with their application.</p>
						</div>
					`;
				}
				
				// Update contact button - XSS Safe
				const contactBtn = document.getElementById('contact_applicant_btn');
				// Validate email format and sanitize - Using same regex as application-validator.ts (RFC 5322 compliant)
				const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*\.[a-zA-Z]{2,}$/;
				if (applicantEmail && emailRegex.test(applicantEmail)) {
					contactBtn.setAttribute('href', 'mailto:' + encodeURIComponent(applicantEmail));
				} else {
					contactBtn.removeAttribute('href');
					contactBtn.style.opacity = '0.5';
					contactBtn.style.cursor = 'not-allowed';
				}
				
				// Show modal
				document.getElementById('cover_letter_modal').showModal();
			}
		});
	});

	function viewApplicationDetails(applicationId) {
		// This could navigate to a detailed application view
		// For now, we'll just show an alert
		alert(`Viewing details for application ${applicationId}\n\nThis feature can be implemented to show full application details in a modal or separate page.`);
	}

	function acceptApplicant(applicationId, jobRoleId, applicantName) {
		if (confirm(`Are you sure you want to accept ${applicantName}?`)) {
			fetch(`/job-roles/${jobRoleId}/applications/${applicationId}/accept`, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({}),
			})
			.then(response => response.json())
			.then(data => {
				if (data.success) {
					alert(`${applicantName} has been accepted!`);
					// Reload the page to refresh the applicants list
					location.reload();
				} else {
					alert(`Error: ${data.message}`);
				}
			})
			.catch(error => {
				console.error('Error accepting applicant:', error);
				alert('Error accepting applicant. Please try again.');
			});
		}
	}

	function rejectApplicant(applicationId, jobRoleId, applicantName) {
		if (confirm(`Are you sure you want to reject ${applicantName}?`)) {
			fetch(`/job-roles/${jobRoleId}/applications/${applicationId}/reject`, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({}),
			})
			.then(response => response.json())
			.then(data => {
				if (data.success) {
					alert(`${applicantName} has been rejected!`);
					// Reload the page to refresh the applicants list
					location.reload();
				} else {
					alert(`Error: ${data.message}`);
				}
			})
			.catch(error => {
				console.error('Error rejecting applicant:', error);
				alert('Error rejecting applicant. Please try again.');
			});
		}
	}
</script>
{% endblock %}